// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Types

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WifiNetwork struct {
	_tab flatbuffers.Table
}

func GetRootAsWifiNetwork(buf []byte, offset flatbuffers.UOffsetT) *WifiNetwork {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WifiNetwork{}
	x.Init(buf, n+offset)
	return x
}

func FinishWifiNetworkBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsWifiNetwork(buf []byte, offset flatbuffers.UOffsetT) *WifiNetwork {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WifiNetwork{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedWifiNetworkBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *WifiNetwork) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WifiNetwork) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WifiNetwork) Ssid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WifiNetwork) Bssid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WifiNetwork) Channel() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WifiNetwork) MutateChannel(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *WifiNetwork) Rssi() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WifiNetwork) MutateRssi(n int8) bool {
	return rcv._tab.MutateInt8Slot(10, n)
}

func (rcv *WifiNetwork) AuthMode() WifiAuthMode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return WifiAuthMode(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *WifiNetwork) MutateAuthMode(n WifiAuthMode) bool {
	return rcv._tab.MutateByteSlot(12, byte(n))
}

func (rcv *WifiNetwork) Saved() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *WifiNetwork) MutateSaved(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func WifiNetworkStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func WifiNetworkAddSsid(builder *flatbuffers.Builder, ssid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ssid), 0)
}
func WifiNetworkAddBssid(builder *flatbuffers.Builder, bssid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(bssid), 0)
}
func WifiNetworkAddChannel(builder *flatbuffers.Builder, channel byte) {
	builder.PrependByteSlot(2, channel, 0)
}
func WifiNetworkAddRssi(builder *flatbuffers.Builder, rssi int8) {
	builder.PrependInt8Slot(3, rssi, 0)
}
func WifiNetworkAddAuthMode(builder *flatbuffers.Builder, authMode WifiAuthMode) {
	builder.PrependByteSlot(4, byte(authMode), 0)
}
func WifiNetworkAddSaved(builder *flatbuffers.Builder, saved bool) {
	builder.PrependBoolSlot(5, saved, false)
}
func WifiNetworkEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
