// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Types

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SemVer struct {
	_tab flatbuffers.Table
}

func GetRootAsSemVer(buf []byte, offset flatbuffers.UOffsetT) *SemVer {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SemVer{}
	x.Init(buf, n+offset)
	return x
}

func FinishSemVerBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSemVer(buf []byte, offset flatbuffers.UOffsetT) *SemVer {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SemVer{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSemVerBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SemVer) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SemVer) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SemVer) Major() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SemVer) MutateMajor(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *SemVer) Minor() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SemVer) MutateMinor(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *SemVer) Patch() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SemVer) MutatePatch(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *SemVer) Prerelease() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SemVer) Build() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func SemVerStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func SemVerAddMajor(builder *flatbuffers.Builder, major uint16) {
	builder.PrependUint16Slot(0, major, 0)
}
func SemVerAddMinor(builder *flatbuffers.Builder, minor uint16) {
	builder.PrependUint16Slot(1, minor, 0)
}
func SemVerAddPatch(builder *flatbuffers.Builder, patch uint16) {
	builder.PrependUint16Slot(2, patch, 0)
}
func SemVerAddPrerelease(builder *flatbuffers.Builder, prerelease flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(prerelease), 0)
}
func SemVerAddBuild(builder *flatbuffers.Builder, build flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(build), 0)
}
func SemVerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
