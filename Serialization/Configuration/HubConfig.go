// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Configuration

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type HubConfig struct {
	_tab flatbuffers.Table
}

func GetRootAsHubConfig(buf []byte, offset flatbuffers.UOffsetT) *HubConfig {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HubConfig{}
	x.Init(buf, n+offset)
	return x
}

func FinishHubConfigBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsHubConfig(buf []byte, offset flatbuffers.UOffsetT) *HubConfig {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &HubConfig{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedHubConfigBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *HubConfig) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HubConfig) Table() flatbuffers.Table {
	return rcv._tab
}

/// RF Transmitter configuration
func (rcv *HubConfig) Rf(obj *RFConfig) *RFConfig {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RFConfig)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// RF Transmitter configuration
/// WiFi configuration
func (rcv *HubConfig) Wifi(obj *WiFiConfig) *WiFiConfig {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(WiFiConfig)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// WiFi configuration
/// Captive portal configuration
func (rcv *HubConfig) CaptivePortal(obj *CaptivePortalConfig) *CaptivePortalConfig {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CaptivePortalConfig)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Captive portal configuration
/// Backend configuration
func (rcv *HubConfig) Backend(obj *BackendConfig) *BackendConfig {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(BackendConfig)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Backend configuration
/// Serial input configuration
func (rcv *HubConfig) SerialInput(obj *SerialInputConfig) *SerialInputConfig {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(SerialInputConfig)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Serial input configuration
/// OTA update configuration
func (rcv *HubConfig) OtaUpdate(obj *OtaUpdateConfig) *OtaUpdateConfig {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(OtaUpdateConfig)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// OTA update configuration
/// E-Stop configuration
func (rcv *HubConfig) Estop(obj *EStopConfig) *EStopConfig {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(EStopConfig)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// E-Stop configuration
func HubConfigStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func HubConfigAddRf(builder *flatbuffers.Builder, rf flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(rf), 0)
}
func HubConfigAddWifi(builder *flatbuffers.Builder, wifi flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(wifi), 0)
}
func HubConfigAddCaptivePortal(builder *flatbuffers.Builder, captivePortal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(captivePortal), 0)
}
func HubConfigAddBackend(builder *flatbuffers.Builder, backend flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(backend), 0)
}
func HubConfigAddSerialInput(builder *flatbuffers.Builder, serialInput flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(serialInput), 0)
}
func HubConfigAddOtaUpdate(builder *flatbuffers.Builder, otaUpdate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(otaUpdate), 0)
}
func HubConfigAddEstop(builder *flatbuffers.Builder, estop flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(estop), 0)
}
func HubConfigEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
