// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Configuration

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RFConfig struct {
	_tab flatbuffers.Table
}

func GetRootAsRFConfig(buf []byte, offset flatbuffers.UOffsetT) *RFConfig {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RFConfig{}
	x.Init(buf, n+offset)
	return x
}

func FinishRFConfigBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRFConfig(buf []byte, offset flatbuffers.UOffsetT) *RFConfig {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RFConfig{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRFConfigBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *RFConfig) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RFConfig) Table() flatbuffers.Table {
	return rcv._tab
}

/// The GPIO pin connected to the RF modulator's data pin for transmitting (TX)
func (rcv *RFConfig) TxPin() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

/// The GPIO pin connected to the RF modulator's data pin for transmitting (TX)
func (rcv *RFConfig) MutateTxPin(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

/// Whether to transmit keepalive messages to keep the shockers from entering sleep mode
func (rcv *RFConfig) KeepaliveEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Whether to transmit keepalive messages to keep the shockers from entering sleep mode
func (rcv *RFConfig) MutateKeepaliveEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func RFConfigStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RFConfigAddTxPin(builder *flatbuffers.Builder, txPin int8) {
	builder.PrependInt8Slot(0, txPin, 0)
}
func RFConfigAddKeepaliveEnabled(builder *flatbuffers.Builder, keepaliveEnabled bool) {
	builder.PrependBoolSlot(1, keepaliveEnabled, false)
}
func RFConfigEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
