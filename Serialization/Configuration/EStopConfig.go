// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Configuration

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EStopConfig struct {
	_tab flatbuffers.Table
}

func GetRootAsEStopConfig(buf []byte, offset flatbuffers.UOffsetT) *EStopConfig {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EStopConfig{}
	x.Init(buf, n+offset)
	return x
}

func FinishEStopConfigBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEStopConfig(buf []byte, offset flatbuffers.UOffsetT) *EStopConfig {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EStopConfig{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEStopConfigBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EStopConfig) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EStopConfig) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EStopConfig) Enabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *EStopConfig) MutateEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// The GPIO pin connected to the E-Stop button
func (rcv *EStopConfig) GpioPin() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

/// The GPIO pin connected to the E-Stop button
func (rcv *EStopConfig) MutateGpioPin(n int8) bool {
	return rcv._tab.MutateInt8Slot(6, n)
}

/// Persistent state of the E-Stop button
func (rcv *EStopConfig) Active() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Persistent state of the E-Stop button
func (rcv *EStopConfig) MutateActive(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func EStopConfigStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func EStopConfigAddEnabled(builder *flatbuffers.Builder, enabled bool) {
	builder.PrependBoolSlot(0, enabled, false)
}
func EStopConfigAddGpioPin(builder *flatbuffers.Builder, gpioPin int8) {
	builder.PrependInt8Slot(1, gpioPin, 0)
}
func EStopConfigAddActive(builder *flatbuffers.Builder, active bool) {
	builder.PrependBoolSlot(2, active, false)
}
func EStopConfigEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
