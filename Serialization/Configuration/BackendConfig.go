// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Configuration

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BackendConfig struct {
	_tab flatbuffers.Table
}

func GetRootAsBackendConfig(buf []byte, offset flatbuffers.UOffsetT) *BackendConfig {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BackendConfig{}
	x.Init(buf, n+offset)
	return x
}

func FinishBackendConfigBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsBackendConfig(buf []byte, offset flatbuffers.UOffsetT) *BackendConfig {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BackendConfig{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedBackendConfigBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *BackendConfig) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BackendConfig) Table() flatbuffers.Table {
	return rcv._tab
}

/// Domain name of the backend server, e.g. "api.shocklink.net"
func (rcv *BackendConfig) Domain() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Domain name of the backend server, e.g. "api.shocklink.net"
/// Authentication token for the backend server
func (rcv *BackendConfig) AuthToken() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Authentication token for the backend server
/// Override the Live-Control-Gateway (LCG) URL
func (rcv *BackendConfig) LcgOverride() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Override the Live-Control-Gateway (LCG) URL
func BackendConfigStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func BackendConfigAddDomain(builder *flatbuffers.Builder, domain flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(domain), 0)
}
func BackendConfigAddAuthToken(builder *flatbuffers.Builder, authToken flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(authToken), 0)
}
func BackendConfigAddLcgOverride(builder *flatbuffers.Builder, lcgOverride flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(lcgOverride), 0)
}
func BackendConfigEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
