// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Configuration

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OtaUpdateConfig struct {
	_tab flatbuffers.Table
}

func GetRootAsOtaUpdateConfig(buf []byte, offset flatbuffers.UOffsetT) *OtaUpdateConfig {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OtaUpdateConfig{}
	x.Init(buf, n+offset)
	return x
}

func FinishOtaUpdateConfigBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsOtaUpdateConfig(buf []byte, offset flatbuffers.UOffsetT) *OtaUpdateConfig {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OtaUpdateConfig{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOtaUpdateConfigBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *OtaUpdateConfig) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OtaUpdateConfig) Table() flatbuffers.Table {
	return rcv._tab
}

/// Indicates whether OTA updates are enabled.
func (rcv *OtaUpdateConfig) IsEnabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indicates whether OTA updates are enabled.
func (rcv *OtaUpdateConfig) MutateIsEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// The domain name of the OTA Content Delivery Network (CDN).
func (rcv *OtaUpdateConfig) CdnDomain() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The domain name of the OTA Content Delivery Network (CDN).
/// The update channel to use.
func (rcv *OtaUpdateConfig) UpdateChannel() OtaUpdateChannel {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return OtaUpdateChannel(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

/// The update channel to use.
func (rcv *OtaUpdateConfig) MutateUpdateChannel(n OtaUpdateChannel) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

/// Indicates whether to check for updates on startup.
func (rcv *OtaUpdateConfig) CheckOnStartup() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indicates whether to check for updates on startup.
func (rcv *OtaUpdateConfig) MutateCheckOnStartup(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

/// Indicates whether to check for updates periodically.
func (rcv *OtaUpdateConfig) CheckPeriodically() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indicates whether to check for updates periodically.
func (rcv *OtaUpdateConfig) MutateCheckPeriodically(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

/// The interval in minutes between periodic update checks.
func (rcv *OtaUpdateConfig) CheckInterval() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

/// The interval in minutes between periodic update checks.
func (rcv *OtaUpdateConfig) MutateCheckInterval(n uint16) bool {
	return rcv._tab.MutateUint16Slot(14, n)
}

/// Indicates if the backend is authorized to manage the hub's update version on behalf of the user.
func (rcv *OtaUpdateConfig) AllowBackendManagement() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indicates if the backend is authorized to manage the hub's update version on behalf of the user.
func (rcv *OtaUpdateConfig) MutateAllowBackendManagement(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

/// Indicates if manual approval via serial input or captive portal is required before installing updates.
func (rcv *OtaUpdateConfig) RequireManualApproval() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indicates if manual approval via serial input or captive portal is required before installing updates.
func (rcv *OtaUpdateConfig) MutateRequireManualApproval(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

/// Update process ID, used to track the update process server-side across reboots.
func (rcv *OtaUpdateConfig) UpdateId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Update process ID, used to track the update process server-side across reboots.
func (rcv *OtaUpdateConfig) MutateUpdateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

/// Indicates what step of the update process the hub is currently in, used to detect failed updates for status reporting.
func (rcv *OtaUpdateConfig) UpdateStep() OtaUpdateStep {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return OtaUpdateStep(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicates what step of the update process the hub is currently in, used to detect failed updates for status reporting.
func (rcv *OtaUpdateConfig) MutateUpdateStep(n OtaUpdateStep) bool {
	return rcv._tab.MutateByteSlot(22, byte(n))
}

func OtaUpdateConfigStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func OtaUpdateConfigAddIsEnabled(builder *flatbuffers.Builder, isEnabled bool) {
	builder.PrependBoolSlot(0, isEnabled, false)
}
func OtaUpdateConfigAddCdnDomain(builder *flatbuffers.Builder, cdnDomain flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(cdnDomain), 0)
}
func OtaUpdateConfigAddUpdateChannel(builder *flatbuffers.Builder, updateChannel OtaUpdateChannel) {
	builder.PrependByteSlot(2, byte(updateChannel), 0)
}
func OtaUpdateConfigAddCheckOnStartup(builder *flatbuffers.Builder, checkOnStartup bool) {
	builder.PrependBoolSlot(3, checkOnStartup, false)
}
func OtaUpdateConfigAddCheckPeriodically(builder *flatbuffers.Builder, checkPeriodically bool) {
	builder.PrependBoolSlot(4, checkPeriodically, false)
}
func OtaUpdateConfigAddCheckInterval(builder *flatbuffers.Builder, checkInterval uint16) {
	builder.PrependUint16Slot(5, checkInterval, 0)
}
func OtaUpdateConfigAddAllowBackendManagement(builder *flatbuffers.Builder, allowBackendManagement bool) {
	builder.PrependBoolSlot(6, allowBackendManagement, false)
}
func OtaUpdateConfigAddRequireManualApproval(builder *flatbuffers.Builder, requireManualApproval bool) {
	builder.PrependBoolSlot(7, requireManualApproval, false)
}
func OtaUpdateConfigAddUpdateId(builder *flatbuffers.Builder, updateId int32) {
	builder.PrependInt32Slot(8, updateId, 0)
}
func OtaUpdateConfigAddUpdateStep(builder *flatbuffers.Builder, updateStep OtaUpdateStep) {
	builder.PrependByteSlot(9, byte(updateStep), 0)
}
func OtaUpdateConfigEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
