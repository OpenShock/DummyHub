// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Local

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OtaUpdateSetIsEnabledCommand struct {
	_tab flatbuffers.Table
}

func GetRootAsOtaUpdateSetIsEnabledCommand(buf []byte, offset flatbuffers.UOffsetT) *OtaUpdateSetIsEnabledCommand {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OtaUpdateSetIsEnabledCommand{}
	x.Init(buf, n+offset)
	return x
}

func FinishOtaUpdateSetIsEnabledCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsOtaUpdateSetIsEnabledCommand(buf []byte, offset flatbuffers.UOffsetT) *OtaUpdateSetIsEnabledCommand {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OtaUpdateSetIsEnabledCommand{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOtaUpdateSetIsEnabledCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *OtaUpdateSetIsEnabledCommand) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OtaUpdateSetIsEnabledCommand) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OtaUpdateSetIsEnabledCommand) Enabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *OtaUpdateSetIsEnabledCommand) MutateEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func OtaUpdateSetIsEnabledCommandStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func OtaUpdateSetIsEnabledCommandAddEnabled(builder *flatbuffers.Builder, enabled bool) {
	builder.PrependBoolSlot(0, enabled, false)
}
func OtaUpdateSetIsEnabledCommandEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
