// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Local

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AccountLinkCommandResult struct {
	_tab flatbuffers.Table
}

func GetRootAsAccountLinkCommandResult(buf []byte, offset flatbuffers.UOffsetT) *AccountLinkCommandResult {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AccountLinkCommandResult{}
	x.Init(buf, n+offset)
	return x
}

func FinishAccountLinkCommandResultBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsAccountLinkCommandResult(buf []byte, offset flatbuffers.UOffsetT) *AccountLinkCommandResult {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AccountLinkCommandResult{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAccountLinkCommandResultBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *AccountLinkCommandResult) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AccountLinkCommandResult) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AccountLinkCommandResult) Result() AccountLinkResultCode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return AccountLinkResultCode(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AccountLinkCommandResult) MutateResult(n AccountLinkResultCode) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func AccountLinkCommandResultStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AccountLinkCommandResultAddResult(builder *flatbuffers.Builder, result AccountLinkResultCode) {
	builder.PrependByteSlot(0, byte(result), 0)
}
func AccountLinkCommandResultEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
