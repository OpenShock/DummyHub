// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Local

import (
	flatbuffers "github.com/google/flatbuffers/go"

	OpenShock__Serialization__Configuration "OpenShock/Serialization/Configuration"
	OpenShock__Serialization__Types "OpenShock/Serialization/Types"
)

type ReadyMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsReadyMessage(buf []byte, offset flatbuffers.UOffsetT) *ReadyMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ReadyMessage{}
	x.Init(buf, n+offset)
	return x
}

func FinishReadyMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsReadyMessage(buf []byte, offset flatbuffers.UOffsetT) *ReadyMessage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ReadyMessage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedReadyMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ReadyMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ReadyMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ReadyMessage) Poggies() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ReadyMessage) MutatePoggies(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *ReadyMessage) ConnectedWifi(obj *OpenShock__Serialization__Types.WifiNetwork) *OpenShock__Serialization__Types.WifiNetwork {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(OpenShock__Serialization__Types.WifiNetwork)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ReadyMessage) AccountLinked() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ReadyMessage) MutateAccountLinked(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *ReadyMessage) Config(obj *OpenShock__Serialization__Configuration.HubConfig) *OpenShock__Serialization__Configuration.HubConfig {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(OpenShock__Serialization__Configuration.HubConfig)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ReadyMessage) GpioValidInputs(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ReadyMessage) GpioValidInputsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ReadyMessage) MutateGpioValidInputs(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *ReadyMessage) GpioValidOutputs(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ReadyMessage) GpioValidOutputsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ReadyMessage) MutateGpioValidOutputs(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func ReadyMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ReadyMessageAddPoggies(builder *flatbuffers.Builder, poggies bool) {
	builder.PrependBoolSlot(0, poggies, false)
}
func ReadyMessageAddConnectedWifi(builder *flatbuffers.Builder, connectedWifi flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(connectedWifi), 0)
}
func ReadyMessageAddAccountLinked(builder *flatbuffers.Builder, accountLinked bool) {
	builder.PrependBoolSlot(2, accountLinked, false)
}
func ReadyMessageAddConfig(builder *flatbuffers.Builder, config flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(config), 0)
}
func ReadyMessageAddGpioValidInputs(builder *flatbuffers.Builder, gpioValidInputs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(gpioValidInputs), 0)
}
func ReadyMessageStartGpioValidInputsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ReadyMessageAddGpioValidOutputs(builder *flatbuffers.Builder, gpioValidOutputs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(gpioValidOutputs), 0)
}
func ReadyMessageStartGpioValidOutputsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ReadyMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
