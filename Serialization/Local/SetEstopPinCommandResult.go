// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Local

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SetEstopPinCommandResult struct {
	_tab flatbuffers.Table
}

func GetRootAsSetEstopPinCommandResult(buf []byte, offset flatbuffers.UOffsetT) *SetEstopPinCommandResult {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SetEstopPinCommandResult{}
	x.Init(buf, n+offset)
	return x
}

func FinishSetEstopPinCommandResultBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSetEstopPinCommandResult(buf []byte, offset flatbuffers.UOffsetT) *SetEstopPinCommandResult {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SetEstopPinCommandResult{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSetEstopPinCommandResultBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SetEstopPinCommandResult) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SetEstopPinCommandResult) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SetEstopPinCommandResult) GpioPin() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SetEstopPinCommandResult) MutateGpioPin(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *SetEstopPinCommandResult) Result() SetGPIOResultCode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return SetGPIOResultCode(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SetEstopPinCommandResult) MutateResult(n SetGPIOResultCode) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func SetEstopPinCommandResultStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SetEstopPinCommandResultAddGpioPin(builder *flatbuffers.Builder, gpioPin int8) {
	builder.PrependInt8Slot(0, gpioPin, 0)
}
func SetEstopPinCommandResultAddResult(builder *flatbuffers.Builder, result SetGPIOResultCode) {
	builder.PrependByteSlot(1, byte(result), 0)
}
func SetEstopPinCommandResultEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
