// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Local

import (
	flatbuffers "github.com/google/flatbuffers/go"

	OpenShock__Serialization__Types "OpenShock/Serialization/Types"
)

type WifiScanStatusMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsWifiScanStatusMessage(buf []byte, offset flatbuffers.UOffsetT) *WifiScanStatusMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WifiScanStatusMessage{}
	x.Init(buf, n+offset)
	return x
}

func FinishWifiScanStatusMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsWifiScanStatusMessage(buf []byte, offset flatbuffers.UOffsetT) *WifiScanStatusMessage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WifiScanStatusMessage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedWifiScanStatusMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *WifiScanStatusMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WifiScanStatusMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WifiScanStatusMessage) Status() OpenShock__Serialization__Types.WifiScanStatus {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return OpenShock__Serialization__Types.WifiScanStatus(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *WifiScanStatusMessage) MutateStatus(n OpenShock__Serialization__Types.WifiScanStatus) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func WifiScanStatusMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func WifiScanStatusMessageAddStatus(builder *flatbuffers.Builder, status OpenShock__Serialization__Types.WifiScanStatus) {
	builder.PrependByteSlot(0, byte(status), 0)
}
func WifiScanStatusMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
