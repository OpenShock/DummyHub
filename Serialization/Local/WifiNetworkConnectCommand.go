// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Local

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WifiNetworkConnectCommand struct {
	_tab flatbuffers.Table
}

func GetRootAsWifiNetworkConnectCommand(buf []byte, offset flatbuffers.UOffsetT) *WifiNetworkConnectCommand {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WifiNetworkConnectCommand{}
	x.Init(buf, n+offset)
	return x
}

func FinishWifiNetworkConnectCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsWifiNetworkConnectCommand(buf []byte, offset flatbuffers.UOffsetT) *WifiNetworkConnectCommand {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WifiNetworkConnectCommand{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedWifiNetworkConnectCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *WifiNetworkConnectCommand) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WifiNetworkConnectCommand) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WifiNetworkConnectCommand) Ssid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func WifiNetworkConnectCommandStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func WifiNetworkConnectCommandAddSsid(builder *flatbuffers.Builder, ssid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ssid), 0)
}
func WifiNetworkConnectCommandEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
