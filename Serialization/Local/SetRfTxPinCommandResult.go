// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Local

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SetRfTxPinCommandResult struct {
	_tab flatbuffers.Table
}

func GetRootAsSetRfTxPinCommandResult(buf []byte, offset flatbuffers.UOffsetT) *SetRfTxPinCommandResult {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SetRfTxPinCommandResult{}
	x.Init(buf, n+offset)
	return x
}

func FinishSetRfTxPinCommandResultBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSetRfTxPinCommandResult(buf []byte, offset flatbuffers.UOffsetT) *SetRfTxPinCommandResult {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SetRfTxPinCommandResult{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSetRfTxPinCommandResultBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SetRfTxPinCommandResult) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SetRfTxPinCommandResult) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SetRfTxPinCommandResult) Pin() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SetRfTxPinCommandResult) MutatePin(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *SetRfTxPinCommandResult) Result() SetGPIOResultCode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return SetGPIOResultCode(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SetRfTxPinCommandResult) MutateResult(n SetGPIOResultCode) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func SetRfTxPinCommandResultStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SetRfTxPinCommandResultAddPin(builder *flatbuffers.Builder, pin int8) {
	builder.PrependInt8Slot(0, pin, 0)
}
func SetRfTxPinCommandResultAddResult(builder *flatbuffers.Builder, result SetGPIOResultCode) {
	builder.PrependByteSlot(1, byte(result), 0)
}
func SetRfTxPinCommandResultEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
