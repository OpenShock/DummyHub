// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Gateway

import (
	flatbuffers "github.com/google/flatbuffers/go"

	OpenShock__Serialization__Types "OpenShock/Serialization/Types"
)

type OtaUpdateProgress struct {
	_tab flatbuffers.Table
}

func GetRootAsOtaUpdateProgress(buf []byte, offset flatbuffers.UOffsetT) *OtaUpdateProgress {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OtaUpdateProgress{}
	x.Init(buf, n+offset)
	return x
}

func FinishOtaUpdateProgressBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsOtaUpdateProgress(buf []byte, offset flatbuffers.UOffsetT) *OtaUpdateProgress {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OtaUpdateProgress{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOtaUpdateProgressBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *OtaUpdateProgress) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OtaUpdateProgress) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OtaUpdateProgress) UpdateId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OtaUpdateProgress) MutateUpdateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *OtaUpdateProgress) Task() OpenShock__Serialization__Types.OtaUpdateProgressTask {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return OpenShock__Serialization__Types.OtaUpdateProgressTask(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *OtaUpdateProgress) MutateTask(n OpenShock__Serialization__Types.OtaUpdateProgressTask) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *OtaUpdateProgress) Progress() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *OtaUpdateProgress) MutateProgress(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func OtaUpdateProgressStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func OtaUpdateProgressAddUpdateId(builder *flatbuffers.Builder, updateId int32) {
	builder.PrependInt32Slot(0, updateId, 0)
}
func OtaUpdateProgressAddTask(builder *flatbuffers.Builder, task OpenShock__Serialization__Types.OtaUpdateProgressTask) {
	builder.PrependByteSlot(1, byte(task), 0)
}
func OtaUpdateProgressAddProgress(builder *flatbuffers.Builder, progress float32) {
	builder.PrependFloat32Slot(2, progress, 0.0)
}
func OtaUpdateProgressEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
