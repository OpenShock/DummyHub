// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Gateway

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Ping struct {
	_tab flatbuffers.Table
}

func GetRootAsPing(buf []byte, offset flatbuffers.UOffsetT) *Ping {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Ping{}
	x.Init(buf, n+offset)
	return x
}

func FinishPingBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPing(buf []byte, offset flatbuffers.UOffsetT) *Ping {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Ping{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPingBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Ping) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Ping) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Ping) UnixUtcTime() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Ping) MutateUnixUtcTime(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func PingStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func PingAddUnixUtcTime(builder *flatbuffers.Builder, unixUtcTime uint64) {
	builder.PrependUint64Slot(0, unixUtcTime, 0)
}
func PingEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
