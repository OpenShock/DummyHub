// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Gateway

import (
	flatbuffers "github.com/google/flatbuffers/go"

	OpenShock__Serialization__Types "OpenShock/Serialization/Types"
)

type BootStatus struct {
	_tab flatbuffers.Table
}

func GetRootAsBootStatus(buf []byte, offset flatbuffers.UOffsetT) *BootStatus {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BootStatus{}
	x.Init(buf, n+offset)
	return x
}

func FinishBootStatusBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsBootStatus(buf []byte, offset flatbuffers.UOffsetT) *BootStatus {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BootStatus{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedBootStatusBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *BootStatus) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BootStatus) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BootStatus) BootType() OpenShock__Serialization__Types.FirmwareBootType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return OpenShock__Serialization__Types.FirmwareBootType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BootStatus) MutateBootType(n OpenShock__Serialization__Types.FirmwareBootType) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *BootStatus) FirmwareVersion(obj *OpenShock__Serialization__Types.SemVer) *OpenShock__Serialization__Types.SemVer {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(OpenShock__Serialization__Types.SemVer)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *BootStatus) OtaUpdateId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BootStatus) MutateOtaUpdateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func BootStatusStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func BootStatusAddBootType(builder *flatbuffers.Builder, bootType OpenShock__Serialization__Types.FirmwareBootType) {
	builder.PrependByteSlot(0, byte(bootType), 0)
}
func BootStatusAddFirmwareVersion(builder *flatbuffers.Builder, firmwareVersion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(firmwareVersion), 0)
}
func BootStatusAddOtaUpdateId(builder *flatbuffers.Builder, otaUpdateId int32) {
	builder.PrependInt32Slot(2, otaUpdateId, 0)
}
func BootStatusEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
