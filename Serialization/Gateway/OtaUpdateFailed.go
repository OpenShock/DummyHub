// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Gateway

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OtaUpdateFailed struct {
	_tab flatbuffers.Table
}

func GetRootAsOtaUpdateFailed(buf []byte, offset flatbuffers.UOffsetT) *OtaUpdateFailed {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OtaUpdateFailed{}
	x.Init(buf, n+offset)
	return x
}

func FinishOtaUpdateFailedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsOtaUpdateFailed(buf []byte, offset flatbuffers.UOffsetT) *OtaUpdateFailed {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OtaUpdateFailed{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOtaUpdateFailedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *OtaUpdateFailed) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OtaUpdateFailed) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OtaUpdateFailed) UpdateId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OtaUpdateFailed) MutateUpdateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *OtaUpdateFailed) Message() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *OtaUpdateFailed) Fatal() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *OtaUpdateFailed) MutateFatal(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func OtaUpdateFailedStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func OtaUpdateFailedAddUpdateId(builder *flatbuffers.Builder, updateId int32) {
	builder.PrependInt32Slot(0, updateId, 0)
}
func OtaUpdateFailedAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(message), 0)
}
func OtaUpdateFailedAddFatal(builder *flatbuffers.Builder, fatal bool) {
	builder.PrependBoolSlot(2, fatal, false)
}
func OtaUpdateFailedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
