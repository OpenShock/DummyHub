// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Gateway

import (
	flatbuffers "github.com/google/flatbuffers/go"

	OpenShock__Serialization__Types "OpenShock/Serialization/Types"
)

type OtaUpdateRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsOtaUpdateRequest(buf []byte, offset flatbuffers.UOffsetT) *OtaUpdateRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OtaUpdateRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishOtaUpdateRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsOtaUpdateRequest(buf []byte, offset flatbuffers.UOffsetT) *OtaUpdateRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OtaUpdateRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOtaUpdateRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *OtaUpdateRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OtaUpdateRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OtaUpdateRequest) Version(obj *OpenShock__Serialization__Types.SemVer) *OpenShock__Serialization__Types.SemVer {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(OpenShock__Serialization__Types.SemVer)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func OtaUpdateRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func OtaUpdateRequestAddVersion(builder *flatbuffers.Builder, version flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(version), 0)
}
func OtaUpdateRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
