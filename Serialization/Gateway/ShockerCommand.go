// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Gateway

import (
	flatbuffers "github.com/google/flatbuffers/go"

	OpenShock__Serialization__Types "OpenShock/Serialization/Types"
)

type ShockerCommand struct {
	_tab flatbuffers.Table
}

func GetRootAsShockerCommand(buf []byte, offset flatbuffers.UOffsetT) *ShockerCommand {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ShockerCommand{}
	x.Init(buf, n+offset)
	return x
}

func FinishShockerCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsShockerCommand(buf []byte, offset flatbuffers.UOffsetT) *ShockerCommand {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ShockerCommand{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedShockerCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ShockerCommand) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ShockerCommand) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ShockerCommand) Model() OpenShock__Serialization__Types.ShockerModelType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return OpenShock__Serialization__Types.ShockerModelType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ShockerCommand) MutateModel(n OpenShock__Serialization__Types.ShockerModelType) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *ShockerCommand) Id() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShockerCommand) MutateId(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *ShockerCommand) Type() OpenShock__Serialization__Types.ShockerCommandType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return OpenShock__Serialization__Types.ShockerCommandType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ShockerCommand) MutateType(n OpenShock__Serialization__Types.ShockerCommandType) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *ShockerCommand) Intensity() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShockerCommand) MutateIntensity(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *ShockerCommand) Duration() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShockerCommand) MutateDuration(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func ShockerCommandStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ShockerCommandAddModel(builder *flatbuffers.Builder, model OpenShock__Serialization__Types.ShockerModelType) {
	builder.PrependByteSlot(0, byte(model), 0)
}
func ShockerCommandAddId(builder *flatbuffers.Builder, id uint16) {
	builder.PrependUint16Slot(1, id, 0)
}
func ShockerCommandAddType(builder *flatbuffers.Builder, type_ OpenShock__Serialization__Types.ShockerCommandType) {
	builder.PrependByteSlot(2, byte(type_), 0)
}
func ShockerCommandAddIntensity(builder *flatbuffers.Builder, intensity byte) {
	builder.PrependByteSlot(3, intensity, 0)
}
func ShockerCommandAddDuration(builder *flatbuffers.Builder, duration uint16) {
	builder.PrependUint16Slot(4, duration, 0)
}
func ShockerCommandEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
